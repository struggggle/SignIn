Paper name: 
PUMA: Programmable UI-Automation for Large-Scale Dynamic Analysis of Mobile Apps (MobiSys‘14)


Research problem:
How to build a programmable framework that contains a generic UI automation capability that exposes high-level events for which users can define handlers? 


Contributions:
In this paper we propose PUMA, a dynamic analysis framework that can be instantiated for a large number of diverse dynamic analysis tasks that used systems built from scratch. PUMA enables analysis of a wide variety of app properties, allows its users to flexibly specify which app states to explore and how, provides programmatic access to the app’s runtime state for analysis, and supports dynamic runtime environment modification. It encapsulates the common components of existing dynamic analysis systems and exposes a number of configurable hooks that can be programmed with a high level event-driven scripting language, called PUMAScript. This language cleanly separates analysis logic from exploration logic, allowing its users to (a) succinctly specify navigation hints for scalable app exploration and (b) separately specify the logic for analyzing the app properties.


Approach overview:
A user provides two pieces of information as input to PUMA. The first is a set of app binaries that the user wants to analyze. The second is the user-specified code, written in a language called PUMAScript2. The script contains all information needed for the dynamic analysis.
In the first step of PUMA’s workflow, the interpreter component interprets the PUMAScript specification and recognizes two parts in the script: monkey-specific directives and app-specific directives. The former provides necessary inputs or hints on how apps will be executed by the monkey tool, which are then translated as input to our programmable monkey component. The latter dictates which parts of app code are relevant for analysis, and specifies what actions are to be taken when those pieces of code are executed. These app-specific directives are fed as input to an app instrumenter component.
The app instrumenter component statically analyzes the app to determine parts of app code relevant for analysis and instruments the app in a manner described below. The output of this component is the instrumented version of input app that adheres to the app-specific directives in PUMAScript.
Then, the programmable monkey executes the instrumented version of each app, using the monkey-specific directives specified in the PUMAScript. PUMA is designed to execute the instrumented app either on a phone emulator, or on a mobile device. As a side effect of executing the app, PUMA may produce logs which contain outputs specified in the app-specific directives, as well outputs generated by the programmable monkey. Users can analyze these logs using analysis-specific code; such analysis code is not part of PUMA.

